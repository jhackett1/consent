generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  slug        String       
  permissions Permission[]
  memberships Membership[]
  projects    Project[]
  email       String?
}

model Membership {
  admin      Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    Int
  team_id    Int
  team       Team     @relation(fields: [team_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@id([user_id, team_id])
}

model User {
  id              Int          @id @default(autoincrement())
  name            String?
  email           String       @unique
  password_digest String?
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  picture         String?
  memberships     Membership[]
}

model Project {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  team_id    Int
  team       Team     @relation(fields: [team_id], references: [id])
  forms      Form[]
  @@unique([name, team_id])
}

model Form {
  id            Int         @id @default(autoincrement())
  name          String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  project_id    Int
  permissions   Permission[]
  responses     Response[]
  project       Project     @relation(fields: [project_id], references: [id])
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  team_id     Int
  required    Boolean
  team        Team     @relation(fields: [team_id], references: [id])
  forms       Form[]

  @@unique([name, team_id])
}

model Response {
  id              String   @id @default(cuid())
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  agreed_to       Json
  form_id         Int
  participant_id  Int
  form            Form     @relation(fields: [form_id], references: [id])
  participant     User     @relation(fields: [participant_id], references: [id])

  @@unique([form_id, participant_id])
}

model Participant {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  phone      String
  responses  Response[]
  team_id    Int
  team       Team     @relation(fields: [team_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  @@unique([name, email, phone, team_id])
}

model Session {
  sid        String   @id
  sess       Json
  expire     DateTime
  created_at DateTime @default(now())

  @@map("session")
}
